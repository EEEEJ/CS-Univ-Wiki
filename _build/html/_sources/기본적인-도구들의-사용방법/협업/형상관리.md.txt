# 형상관리/버전관리

- 형상관리? 형상을 관리한다고요? 형상이 뭐지…?
- 버전관리? 음…. 그래요 버전을 관리한다?

형상 관리나 버전 관리라는 단어를 들어보신적이 있으신지는 모르겠지만, 여러분은 코딩을 혼자서 하지는 않을 겁니다. 뭐, 혼자서 하신다고 하더라도, 소스 코드를 고쳤는데, 갑자기 컴파일이 안된다던지, 세그 폴트가 뜬다던지, 버그가 새로 생겼다던지의 일이 일어나는 경우를 많이 겪어보셨을 겁니다. 그리고, Ctrl - Z를 계속 치면서 이전 코드로 돌아가려고 최선을 다하지만, 결국에는 실패하고, 이제 컴파일도 제대로 안 되는 코드만 남은 채로, 과제 마감 시간은 1시간이 남은 그런 경험도 곧 겪으실겁니다. 하하. 이러한 끔찍한 일을 겪지 않기 위해서는 버전 관리 시스템 (형상 관리라는 단어를 별로 안 좋아합니다) 을 쓰는 것이 좋습니다.

네, 소스 코드의 버전을 관리해주는 것이 형상 관리 / 버전 관리 툴입니다. 이전 코드로 돌아가고 싶거나, 아님 다른 사람의 수정한 코드를 합쳐야하거나, 딴 사람의 프로젝트를 복사해서 내가 원하는대로 고치고 싶거나 이런 것들을 하는데 큰 도움을 주는 도구이죠.

초창기 오픈소스는 아주 원시적인 방식으로 소스코드를 교환하였습니다. 코드를 수정하고, 기존의 코드와 수정한 코드의 차이점을 diff 명령어를 이용하여 뽑아내고, 그것을 수정한 코드와 diff 해서 나온 텍스트를 같이 첨부한 이메일을 보내고, 소스코드 관리자는 이를 보고 반영할지 말지를 결정했죠.[^1][^2][^3], 이것을 보고 계신 학부생 여러분과 별반 다르지 않았던 것입니다. 20년….. 전에는….. 말이죠…..

뭐 그래서, 이러한 불편한 방식을 바꾸고 싶다는 생각을 당연히 사람들은 했겠고, 그로써 등장한 것이 버전관리시스템인 것입니다.

일반적으로, 지금 한국에서는 svn와 git을 제일 많이 쓰며, 간혹하다 Mercurial을 쓰는 경우도 있습니다. 여러분은 학부생이시니 github이나 gitlab을 주로 쓰실테고, 결국 git과 친숙해져야겠죠. 뭐 git만 잘 쓰면 다른 버전 관리 툴도 잘 쓰실 수 있으실 겁니다. 근본적으로 목표로 하는 것은 동일하니까요.

## Git

사실, 여기의 문서보다 Roger Dulder님이 작성하시고, Juntai Park님과 Ardie님이 번역을 하신 [git - 간편 안내서](https://rogerdudler.github.io/git-guide/index.ko.html)를 보는게 더 나을지도 모릅니다. 영어가 되신다면 [atlassian사의 공식 튜토리얼](https://www.atlassian.com/git/tutorials/)도 추천드립니다. 하지만, 여기서 설명한 내용은 정말 기초적인 부분이 많고, github와 같은 리모트 저장소를 이용하는 좀 더 복잡한 방법(?)들과 함께 설명할 것들도 있고, 역사에 대해서 이야기도 해보고 싶으니 저는 제 방식대로 또 설명을 해야할 거 같습니다.

### Github

### Gitlab

## SVN

## Mercurial

[^1]: 이것에 대한 자세한 설명은 Git 파트에서 이어집니다 :P
[^2]: 아, 제가 왜 이걸 아는지에 대해서 궁금하실 분들이 계시겠지만, 저는 그 당시 유치원생이였고, 기껏 해봤자 PC 통신이라던지 야후 꾸러기에서 이것저것 하던 프로그래밍과는 거의 관계가 없는 아이였습니다. 뭐, 나이가 먹고, 프로그래밍 관련 자료들을 뒤지다 알게 된 것들이죠. 리누스 토발즈의 자서전인 [리눅스 그냥 재미로](https://kldp.org/node/67527)를 한 번 보시길!
[^3]: 자세한 이야기는 월간 마이크로소프트에 기고되었던, [][처음부터 다시 배우는 리눅스] [처음부터 다시배우는 리눅스 ④ 필수 소스버전 관리툴](http://www.zdnet.co.kr/news/news_view.asp?artice_id=00000039131586)을 보시는 걸 추천합니다.
